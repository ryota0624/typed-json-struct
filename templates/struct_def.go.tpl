// Code generated by typed-json-struct. DO NOT EDIT.

package {{.Package}}

import (
	"encoding/json"

	"github.com/ryota0624/typed-json-struct/typed"
)

type (
    {{.Interface}}JSON typed.TypedJSON
)


func {{.Interface}}JSONFromDetail(detail {{.Interface}}) (*{{.Interface}}JSON, error) {
	typedJSON, err := typed.JSONFromDetail(detail)
	if err != nil {
		return nil, err
	}

	j := {{.Interface}}JSON(*typedJSON)
	return &j, nil
}

func (c *{{.Interface}}JSON) UnmarshalJSON(b []byte) error {
	var typedJSON typed.TypedJSON
	if err := json.Unmarshal(b, &typedJSON); err != nil {
		return err
	}

	c.Type = typedJSON.Type
	c.Body = typedJSON.Body
	c.EnumConstructor = {{.EnumConstructor}}{}
	return nil
}

func {{.Interface}}JSONFromRawJSON(rawJSON json.RawMessage) (*{{.Interface}}JSON, error) {
	var structJSON {{.Interface}}JSON
	if err := json.Unmarshal(rawJSON, &structJSON); err != nil {
		return nil, err
	}

	return &structJSON, nil
}


func (c *{{.Interface}}JSON) {{.Interface}}() ({{.Interface}}, error) {
	j := &typed.TypedJSON{
		Type: c.Type,
		Body: c.Body,
		EnumConstructor:  c.EnumConstructor,
	}

	detail, err := j.ToDetail()
	if err != nil {
		return nil, err
	}

	return detail.({{.Interface}}), nil
}
